generator client {
  provider     = "prisma-client-js"
  sdlGenerator = "sdl"
  // engineType    = "library"
  // binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String      @id @default(cuid())
  email         String      @unique
  firstName     String
  lastName      String
  userName      String?     @unique
  password      String
  phone         String?     @unique
  isVerified    Boolean     @default(false)
  accountType   AccountType
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  country       String?
  JobPost       JobPost[]

  oAuthClient OAuthClient[]

  company       Company?
  applicant     Applicant?
  affiliate     Affiliate?
  Notifications Notification[]
}

model OAuthClient {
  id                String   @id @default(cuid())
  provider          String
  providerAccountId String
  accessToken       String
  refreshToken      String?
  expires           DateTime
  tokenType         String

  Account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String   @unique
}

model Partnership {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    RelationStatus

  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  affiliateId String

  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Applicant {
  id             String           @id @default(cuid())
  savedJobs      JobPost[]        @relation("SavedBy")
  applications   JobApplication[]
  workExperience WorkExperience[]
  experienceYear Int?
  education      String?
  resume         String?
  skills         String[]
  languages      String[]
  certificates   String[]
  gender         String?

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique
}

model Company {
  id          String    @id @default(cuid())
  companyName String?   @unique
  logo        String?
  jopPosts    JobPost[]

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique

  affiliates Partnership[]
}

model Affiliate {
  id       String    @id @default(cuid())
  jopPosts JobPost[]

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique

  companies Partnership[]
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  isRead    Boolean  @default(false)

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique
}

model JobPost {
  id                  String     @id @default(cuid())
  title               String
  description         String
  jobType             JobType
  category            String[]
  vacancy             Int
  applicationDeadline DateTime
  salaryType          SalaryType
  jobSite             JobSite
  salary              Int[]
  email               String
  location            String     @default("United States")

  skills             String[]
  jobExperience      Int
  experienceLevel    ExperienceLevel @default(Beginner)
  qualifications     String[]
  englishLevel       EnglishLevel
  otherLanguages     String[]
  interviewQuestions String[]

  isVisible Boolean
  status    PostStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  postedBy        Account @relation(fields: [posterAccountId], references: [id])
  posterAccountId String

  applications JobApplication[]
  savedBy      Applicant[]      @relation("SavedBy")

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  affiliate   Affiliate? @relation(fields: [affiliateId], references: [id])
  affiliateId String?
}

model WorkExperience {
  id             String   @id @default(cuid())
  companyName    String
  position       String
  startDate      DateTime
  endDate        DateTime
  accomplishment String

  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId String
}

model JobApplication {
  id      String            @id @default(cuid())
  status  ApplicationStatus
  message String

  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId String

  jobPost   JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId String
}

// enum Declarations -----------------------------

enum RelationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum JobPoster {
  Company
  Affiliate
}

enum AccountType {
  APPLICANT
  COMPANY
  AFFILIATE
}

enum PostStatus {
  ACTIVE
  DRAFT
  INACTIVE
}

enum EnglishLevel {
  BASIC
  CONVERSATIONAL
  FLUENT
  NATIVE
}

enum SalaryType {
  HOURLY
  MONTHLY
  YEARLY
  ONE_TIME
}

enum JobSite {
  ONSITE
  REMOTE
  HYBRID
}

enum ExperienceLevel {
  Beginner
  Intermediate
  Expert
  Junior
  Senior
}

enum JobType {
  CONTRACTUAL
  INTERNSHIP
  FULL_TIME
  PART_TIME
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
