#schema.graphql
extend type Query{
    me (input: MeInput!): MeAccountPayload
    findAccount(input: AccountInput!): FindOnePayload
}

extend type Mutation {
    updateProfile(input: UpdateProfileInput!): AccountUpdatePayload!
}

type AccountUpdatePayload implements PayloadError{
    errors: [Error!]!
    account: AccountPayload
}

input UpdateProfileInput {
    accountId: String!
    account: AccountUpdateInput
    applicant: ApplicantUpdateInput
}

input AccountUpdateInput {
    firstName: String
    lastName: String
    phone: String
    image: String
    email: String
}

input WorkExperienceInput {
    companyName: String!
    companyWebsite: String
    position: String!
    startDate: DateTime!
    endDate: DateTime!
    accomplishment: String!
    skills  :       [String!]!
}

input ApplicantUpdateInput {
    experienceYear: Int
    resume: String
#    gender: String

    about:               String
    jobPosition:         String
    salaryExpectation:   Int
    location :           String
    skillLevel :         ExperienceLevel
    englishLevel:        EnglishLevel
#    otherLanguages :     [String]
    accomplishment :     String

    workExperience: [WorkExperienceInput!]!


    github:         String
    linkedin:       String
    portfolio:      String

#    education:      String
    skills:         [String!]
}


type AccountPayload {
    id: String!
    email: String!
    emailVerified: DateTime
    firstName: String!
    lastName: String!
    createdAt: DateTime!
    accountType: AccountType!
    phone: String
    image: String

    oAuthClient: [OAuth!]!
    company: CompanyLight
    applicant: ApplicantLight
    affiliate: AffiliateLight
}

type MeAccountPayload {
    id: String!
    email: String!
    emailVerified: DateTime
    firstName: String!
    lastName: String!
    createdAt: DateTime!
    accountType: AccountType!
    phone: String
    image: String

    oAuthClient: [OAuth!]!
    company: CompanyLight
    applicant: Applicant
    affiliate: AffiliateLight
}



input MeInput {
    accountId: String!
}


input AccountInput {
    id: ID
    email: String
    phone: String
}

input OAuthAccount {
    provider: String
}

input AccountFilterInput {
    id: ID
    email: String
    phone: String
}

enum AccountType {
    COMPANY
    APPLICANT
    AFFILIATE
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

interface IAccount {
    id: String!
    email: String!
    firstName: String!
    lastName: String!
    accountType: AccountType!
    createdAt: DateTime!
    phone: String
    image: String
}

type Account implements IAccount{
    id: String!
    email: String!
    firstName: String!
    lastName: String!
    accountType: AccountType!
    createdAt: DateTime!
    phone: String
    image: String
}





scalar DateTime

#type Subscription

