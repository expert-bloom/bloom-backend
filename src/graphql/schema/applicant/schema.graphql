extend type Query{
    getApplicants(input: GetApplicantsInput!): ApplicantConnection
    getApplicant(input: GetApplicantInput!): Applicant
    getJobApplications(input: GetJobApplicationsInput!): ApplicationConnections!
    getJobApplication(input: GetApplicationFilter!): Application
}

extend type Mutation {
    applicantProfileUpdate(input: ApplicantProfileUpdateInput!): AccountUpdate!
    createApplication(input: CreateApplicationInput!): CreateApplicationPayload!

    respondInterview(input: RespondInterviewInput!): Interview
    respondToOffer(input: RespondOfferInput!): Offer
}

input RespondInterviewInput {
    interviewId: String!
    applicantId: String!
    interviewVideoUrl: String
    refuse: Boolean = false
}

input RespondOfferInput {
    offerId: String!
    applicationId: String!
    applicantId: String!
    refuse: Boolean = false
}

input ApplicationFilter {
    status: ApplicationStatus
    applicantId: String
    jobPostId: String
    ids: [String!]
}

input GetApplicationFilter {
    status: ApplicationStatus
    jobPostId: String
    id: String!
}

input GetJobApplicationsInput {
    filter: ApplicationFilter
    first: Int
    last: Int
    after: String
    before: String
    orderBy: [ApplicantOrdering!]
}

input CreateApplicationInput {
    applicantId: String!
    jobPostId: String!
    companyId: String!

    coverLetter: String!
    resume: String!
    phone: String!
    email: String!
    attachment: String
}

input ApplicantProfileUpdateInput {
    accountId: String!
    account: AccountUpdateInput
    applicant: ApplicantUpdateInput
}

input ApplicantUpdateInput {
    experienceYear: Int
    resume: String
    introVideo: String
    #    gender: String

    about:               String
    jobPosition:         String
    salaryExpectation:   Int
    location :           String
    skillLevel :         ExperienceLevel
    englishLevel:        EnglishLevel
    #    otherLanguages :     [String]
    accomplishment :     String

    workExperience: [WorkExperienceInput!]


    github:         String
    linkedin:       String
    portfolio:      String

    #    education:      String
    skills:         [String!]
}



input GetApplicantsInput {
    filter: ApplicantFilter
    first: Int
    last: Int
    after: String
    before: String

    orderBy: [ApplicantOrdering!]
}


input ApplicantOrdering {
    field: AccountSortField!
    direction: OrderDirection!
}

input ApplicantFilter {
    ids: [String!]
}

input GetApplicantInput {
    id: String!
}

type CreateApplicationPayload implements PayloadError{
    application: Application
    errors: [Error!]!
}

type ApplicantConnection {
    edges: [ApplicantEdge!]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
    "A total count of items in the collection."
    totalCount: Int
}

type ApplicantEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Applicant!
}



type ApplicantAccountEdge {
    cursor: String!
    node: Account!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}


type ApplicantAccountConnections {
    edges: [ApplicantAccountEdge!]!
    pageInfo: PageInfo!
}


type ApplicantSavedJobPostEdge {
    cursor: String!
    node: JobPost!
}

type ApplicantAppliedJobPostEdge {
    cursor: String!
    node: JobPost!
}

type GetApplicationPayload implements PayloadError{
    errors: [Error!]!
    application: Application
}

type ApplicationEdge {
    cursor: String!
    node: Application!
}

type ApplicationConnections {
    edges: [ApplicationEdge!]!
    pageInfo: PageInfo!
}

type ApplicantSavedJobPostConnections {
    edges: [ApplicantSavedJobPostEdge!]!
    pageInfo: PageInfo!
}


type Applicant implements Node{
    id: ID!
    experienceYear: Int
    resume: String
    introVideo: String
    gender: String

    about:               String
    jobPosition:         String
    salaryExpectation:   Int
    WorkExperienceYears: Int
    location :           String
    skillLevel :         ExperienceLevel
    englishLevel:        EnglishLevel
    otherLanguages :     [String]
    accomplishment :     String

    workExperience: [WorkExperience!]!
    skills:         [String!]
    languages:      [String]
    education:      String

    github:      String
    linkedin:      String
    portfolio:      String

    account: Account!

    savedJobs(
        first: Int
        after: String
        last: Int
        before: String
    ):  ApplicantSavedJobPostConnections

}



type WorkExperience {
    companyName: String!
    companyWebsite: String
    position: String!
    ongoing: Boolean!
    startDate: DateTime!
    endDate: DateTime
    accomplishment: String!
    skills  :       [String!]!
}


