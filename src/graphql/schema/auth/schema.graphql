extend type Mutation {
    signUp(input: SignUpInput!) : AuthPayload!
    logIn(input: LoginInput!) : AuthPayload!

    signUpOAuth(input: OAuthSignUpInput!) : AuthPayload!
}


type AuthPayload implements PayloadError {
    errors: [Error!]!
    account: AuthAccountPayload
}

type FindOnePayload implements PayloadError {
    errors: [Error!]!
    account: AccountPayload
}

type AuthApplicant {
    id: String!
    experienceYear: Int
    resume: String
    gender: String
}


type AuthAccountPayload {
    id: String!
    email: String!
    emailVerified: DateTime
    firstName: String!
    lastName: String!
    createdAt: DateTime!
    accountType: AccountType!
    phone: String
    image: String

    oAuthClient: [OAuth!]!
}

type OAuth {
    id: String!
    provider: String!
    providerAccountId: String!
    accessToken: String!
    refreshToken: String
    expires: DateTime!
    tokenType: String!
}

# INPUT TYPES  ---------------------------------------------------------------
input LoginInput {
    email: String!
    password: String!
}



input SignUpInput {
    email: String!
    firstName: String!
    companyName: String
    lastName: String!
    password: String!
    accountType: AccountType!
    country : String!

    image: String
    name: String
}

input OAuthInput  {
    provider          : String!
    providerAccountId : String!
    accessToken       : String!
    refreshToken      : String
    expires           : DateTime!
    tokenType         : String!
}

input OAuthAccountInput {
    email: String!
    firstName: String!
    lastName: String!
    accountType: AccountType!
    image: String
    userName: String
}

input OAuthSignUpInput {
    OAuth: OAuthInput!
    account: OAuthAccountInput!
}


input OAuthLoginInput {
    OAuth: OAuthInput!
    account: SignUpInput!
}

